@using FoodTeams.Services
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject NavigationManager UriHelper
@inject OrderService Service
@page "/Welcome"

@if (isLoading)
{
	<div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing />
	</div>
}
else
{
	<style>
		body {
			background-image: url('Food.png');
		}
	</style>

	<div class="welcome page">

		<div class="narrow page-padding">
			<br>
			<br>
			<br>
			<button type="button" class="block" @onclick="NavigateToNewOrder"><strong>New order</strong></button>
			<br>
			<br>
			<br>
			<button type="button" class="block" @onclick="NavigateToActiveOrders"><strong>Active orders</strong></button>
			<br>
			<br>
			<br>
			<button type="button" class="block" @onclick="NavigateToOrderHistory"><strong>Order history</strong></button>
		</div>
	</div>
}

@code {
	string userName;
	string errorMessage;
	bool isInTeams;
	bool isLoading = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			isInTeams = await MicrosoftTeams.IsInTeams();

			if (isInTeams)
			{
				var user = await teamsUserCredential.GetUserInfoAsync();
				userName = user.DisplayName;
			}
			else
			{
				errorMessage = "Not running in Microsoft Teams.";
			}

			isLoading = false;
			StateHasChanged();
		}
	}

	private string GetEnvironmentName()
	{
		return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
	}

	void NavigateToNewOrder()
	{
		UriHelper.NavigateTo("/NewOrder");
	}

	void NavigateToOrderHistory()
	{
		UriHelper.NavigateTo("/OrderHistory");
	}

	void NavigateToActiveOrders()
	{
		UriHelper.NavigateTo("/ActiveOrders");
	}
}

