@page "/ActiveOrderDishes"
@inject NavigationManager UriHelper
@using FoodTeams.Services
@using Microsoft.AspNetCore.Http.Extensions
@inject OrderService orderService
@inject DishService dishService



<body>

	<h1 class="display-3 mb-10" style="text-align:center">ORDER</h1>
	<br />

	<table class="table table-striped" style="background-color:#eeeeee; width:90%; position:center; margin-right:auto; margin-left:auto">
		<thead class="thead-dark">
			<tr>
				<th>Id</th>
				<th>Restaurant Name</th>
				<th>Menu link</th>
				<th>Minimal price</th>
				<th>Delivery price</th>
				<th>Free delivery price</th>
				<th>Total cost</th>
				<th>Blik number</th>
			</tr>
		</thead>

		<tbody>
			<tr>
				<td><b>@orderService.Order.Id</b></td>
				<td>@orderService.Order.RestaurantName</td>
				<td><a href="@orderService.Order.MenuLink" target="_blank">@orderService.Order.MenuLink</a></td>
				<td>@orderService.Order.MinPrice</td>
				<td>@orderService.Order.DeliveryPrice</td>
				<td>@orderService.Order.FreeDeliveryPrice</td>
				<td><b>@orderService.GetOrderCost(orderService.Order)</b></td>
				<td>@orderService.Order.BLIKNumber</td>
			</tr>
			<tr style="text-align:right; font-weight:bold">
				<td colspan="6" style="background-color:white">To reach the minimum price: @(orderService.GetMinimalOrderPrice(orderService.Order))</td>
				<td colspan="2" style="background-color:white">To reach the free delivery price: @(orderService.GetFreeDeliveryOrderPrice(orderService.Order))</td>
			</tr>
		</tbody>
	</table>

	<h1 class="display-3 mb-10" style="text-align:center">DISHES</h1>
	<br />

	<table class="table table-bordered" style="background-color:#eeeeee; width:90%; position:center; margin-right:auto; margin-left:auto">
		<thead class="thead-dark">
			<tr>
				<th>Id</th>
				<th>Description</th>
				<th>Extras</th>
				<th>Price</th>
				<th>UserId</th>
				<th>Actions</th>
			</tr>
		</thead>

		<tbody>
			@foreach (var dish in dishService.dishes)
			{
				<tr>
					<td><b>@dish.Id</b></td>
					<td>@dish.Description</td>
					<td>@dish.Extras</td>
					<td>@dish.Price</td>
					<td>@dish.UserId</td>
					<td>
						<button class="material-icons" style="border:none; font-size:32px" @onclick="()=>EditDish(dish.Id)">edit</button>
						<button class="material-icons" style="border:none; font-size:32px" @onclick="()=>OpenDeleteDialog(dish.Id)">delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>


	<div class="input-group mb-3" style="width:90%; position:center; margin-right:auto; margin-left:auto">
		<div class="input-group-prepend">
			<span class="input-group-text" id="inputGroup-sizing-default">Description</span>
		</div>
		<input placeholder="Description" @bind="Description" type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
	</div>

	<div class="input-group mb-3" style="width:90%; position:center; margin-right:auto; margin-left:auto">
		<div class="input-group-prepend">
			<span class="input-group-text" id="inputGroup-sizing-default">Extras</span>
		</div>
		<input placeholder="Extras" @bind="Extras" type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
	</div>

	<div class="input-group mb-3" style="width:90%; position:center; margin-right:auto; margin-left:auto">
		<div class="input-group-prepend">
			<span class="input-group-text" id="inputGroup-sizing-default">Price</span>
		</div>
		<input placeholder="Price" @bind="Price" type="number" min="0" max="1000" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
	</div>

	<div class="input-group mb-3" style="width:90%; position:center; margin-right:auto; margin-left:auto">
		<div class="input-group-prepend">
			<span class="input-group-text" id="inputGroup-sizing-default">User Id</span>
		</div>
		<input placeholder="User Id" @bind="UserId" type="number" min="0" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
	</div>


	<br />

	<button disabled="@(Price >=1000)" style="display: block;margin: 0 auto;"
			class="btn btn-success" @onclick="()=>AddNewDish(orderService.Order.Id)">
		Add dish
	</button>

	<br />

	<button style="position: fixed; top: 10px; left: 10px; border:none; font-size:32px" class="material-icons" @onclick="NavigateToPrevious">arrow_back</button>
	<button style="position: fixed; top: 10px; left: 60px; border:none; font-size:32px" class="material-icons" @onclick="NavigateToMainMenu">home</button>

</body>

@if (DeleteDialogOpen)
{
	<ModalDialog Title="Are you sure?"
			 Text="Do you want to delete this entry?"
			 OnClose="@OnDeleteDialogClose">
	</ModalDialog>
}

@if (CreateDialogOpen)
{
	<ModalDialog Title="Error"
			 Text="Please fill out Description field"
			 OnClose="@OnCreateDialogClose">
	</ModalDialog>
}

@code {

	public string Description { get; set; }
	public string Extras { get; set; }
	public decimal Price { get; set; }
	public long UserId { get; set; }
	public bool DeleteDialogOpen { get; set; } = false;
	public bool CreateDialogOpen { get; set; } = false;

	public void NavigateToMainMenu()
	{
		UriHelper.NavigateTo("/Welcome");
	}

	public void NavigateToPrevious()
	{
		UriHelper.NavigateTo("/ActiveOrders");
	}


	public void AddNewDish(long id)
	{
		if (string.IsNullOrWhiteSpace(Description))
		{
			OpenCreateDialog();
			return;
		}
		dishService.CreateDish(id, Description, Extras, Price, UserId);
		dishService.GetDishes(id);
		StateHasChanged();
	}

	public void DeleteDish(long id)
	{
		dishService.DeleteDish(id);
		dishService.GetDishes(orderService.Order.Id);
		StateHasChanged();
	}

	public void EditDish(long id)
	{
		dishService.GetDishes(orderService.Order.Id);
		dishService.UpdateDish(id);
		UriHelper.NavigateTo("/EditDish");
	}

	public void OpenDeleteDialog(long id)
	{
		DeleteDialogOpen = true;
		dishService.UpdateDish(id);
		StateHasChanged();
	}

	public void OnDeleteDialogClose(bool accepted)
	{
		if (accepted)
		{
			DeleteDish(dishService.dish.Id);
			StateHasChanged();
		}

		DeleteDialogOpen = false;
		StateHasChanged();
	}

	public void OpenCreateDialog()
	{
		StateHasChanged();
		CreateDialogOpen = true;
		StateHasChanged();
	}

	public void OnCreateDialogClose()
	{
		CreateDialogOpen = false;
		StateHasChanged();
	}

}

